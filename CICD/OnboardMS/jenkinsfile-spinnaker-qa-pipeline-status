def label = "qa-pipeline-${UUID.randomUUID().toString()}"
podTemplate(
    label: label,
    name: label,
    imagePullSecrets: ['prodregistry'],
    containers: [
        containerTemplate(
            name: label,
            image: 'wagdigital.azurecr.io/baseimg/wag-dotcom-build-zulu10-nodejs10-bionic:v2',
            command: 'cat',
            ttyEnabled: true,
            alwaysPullImage: true
        )
    ],
    volumes: [
        hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
        secretVolume(mountPath: '/home/jenkins/secrets', secretName: 'spinnaker-secret')
    ]
){
    properties([
        parameters([
            string(defaultValue: '2020-01-22', description: 'Enter Microservice deployment due date in YYYY-MM-DD format', name: 'DueDate'),
            booleanParam(defaultValue: false, description: 'Select if jira ticket status is in RE-BUILD', name: 'Rebuild'),
            // string(defaultValue: '', description: "Enter jira search query with duedate and status to get the microservices list. Ex: duedate=2019-11-20+and+status=RE-BUILD+AND+status+not+in+(Cancelled)", name: 'SearchQuery'),
            // choice(choices: ['Build', 'Deploy'].join("\n"), description: 'Select the pipeline to trigger', name: 'Pipeline'),
            // string(defaultValue: '', description: 'Enter spinnaker active session', name: 'ActiveSession')
        ]),
        // [$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', numToKeepStr: '10']],
        disableConcurrentBuilds()
    ])
    node(label) {
        container(label) {
            if (params.DueDate == '') {
                currentBuild.result = "ABORTED"
                error "...............Due date is empty..............."
            }
            /*if (params.ActiveSession == '') {
                currentBuild.result = "ABORTED"
                error "...............Spinnaker active session is empty..............."
            }*/
            def spinnakerGateHost = "https://dgtlspinnaker-gate-acs.walgreens.com:8085"
            // def activeSession = ""
            stage('Get Microservices') {
                dir('pipeline') {
                    // def ticketStatus = '+and+status=Open'
                    def ticketStatus = ''
                    if (params.Rebuild == true) {
                        ticketStatus = '+and+status=RE-BUILD'
                    }
                    def getMicroservicesAPIURL = "https://ecomjira.walgreens.com/rest/api/latest/search?jql=type=Deployment+and+Infra=ACS+AND+duedate=${params.DueDate}${ticketStatus}+AND+status+not+in+(Cancelled)&fields=customfield_16410&maxResults=200"
                    sh "curl -k -u siterelease-jirabot:Jir@b0t -H 'Content-Type: application/json' -X GET -# -o apps-to-build.json '${getMicroservicesAPIURL}'"
                    sh '''#!/bin/bash +x
                        TOTAL=`cat apps-to-build.json | jq '.total'`
						echo $TOTAL > total.txt
                        jq -r '.issues[].fields.customfield_16410[0].value' apps-to-build.json > microservices-random.txt
                        tr '[:upper:]' '[:lower:]' < microservices-random.txt > microservices-no-sort.txt
                        sort microservices-no-sort.txt > microservices.txt
                        jq -r '.issues[].key' apps-to-build.json > tickets.txt
                    '''
                    def microservices = readFile 'microservices.txt'
                    def microservicesTotal = readFile 'total.txt'
                    def tickets = readFile 'tickets.txt'
					microservicesTotal = microservicesTotal.replaceAll("\\s","")
					println "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< ${microservicesTotal} Microservices >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
                    println "${microservices}"
                    println "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Tickets >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
                    println "${tickets}"
                }
            }
            /* stage ('Get Spinnaker Session') {
                dir('wag-k8metrics-framework') {
                    git branch: 'master', credentialsId: 'wag_git_creds', url: 'https://wagwiki.wba.com/stash/scm/digdev/wag-k8metrics-framework.git'
                    sh "npm install"
                    withCredentials([usernamePassword(credentialsId: 'wag_spinnaker_cred', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
                        sh 'USERNAME=$USERNAME PASSWORD=$PASSWORD npm run get-spinnaker-session'
                    }
                    activeSession = readFile 'reports/spinnaker-active-session.txt'
                }
            } */
            stage ('Create Dashboard') {
                // if (params.Pipeline == 'Build') {
                    dir('wag-k8metrics-framework') {
                        git branch: 'master', credentialsId: 'wag_git_creds', url: 'https://wagwiki.wba.com/stash/scm/digdev/wag-k8metrics-framework.git'
                        sh "npm install"
                        // sh "echo ${params.ActiveSession} > reports/spinnaker-active-session.txt"
                        sh '''
                            cp ../pipeline/apps-to-build.json ./reports
                            ENV_OVERALL_STATUS=true npm run qa-deployment-dashboard
                        '''
                        publishHTML([allowMissing: true, alwaysLinkToLastBuild: false, keepAll: true, reportDir: './reports', reportFiles: 'qa-build-status.html', reportName: 'QA Build & Deployment Status', reportTitles: 'QA Build & Deployment Status'])
                    }
                // }
            }
        }
    }
}

