/* (c) Walgreen Co. All rights reserved.*/
node {
    properties([
        parameters([
            string(defaultValue: '', description: 'Enter RepoName you want to build Template', name: 'RepoName'),
            string(defaultValue: '', description: 'Enter MicroService you want to build Template', name: 'MicroserviceName'),
            choice(choices: ['Build'].join("\n"), description: 'Select All to create build and deploy pipelines, Build for build only, Deploy for deploy only', name: 'Pipeline'),
            choice(choices: ['NodeJSAPIUI', 'NodeJSAPI', 'SpringBootAPIUI', 'SpringBootAPI','SpringBootAPIPROBE','SpringBootAPIMI','SpringBatch'].join("\n"), description: 'Select type of template', name: 'TemplateType')
        ]),
        [$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', numToKeepStr: '10']],
        disableConcurrentBuilds()
    ])
    stage('Clone') {
        dir('PipelineConfig')  {
            git branch: 'configdevops', credentialsId: 'wag_git_creds', url: 'https://wagwiki.wba.com/stash/scm/ecomm/${RepoName}.git'
        }
        // sh 'rm -rf roer-go'
        dir('roer-go') {
            git branch: 'master', credentialsId: 'wag_git_creds', url: 'https://wagwiki.wba.com/stash/scm/ecomm/spinnaker-template.git'
        }
    }
    stage('Build Pipeline') {
        try {
            if (params.Pipeline == 'All' || params.Pipeline == 'Build') {
                sh 'echo ${BUILD_NUMBER}'
                sh 'echo ${WORKSPACE}'
                sh 'export PATH=/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/var/jenkins_home/workspace/spinnaker/roer-go/go/bin'
                sh 'export GOPATH=/var/jenkins_home/workspace/spinnaker/roer-go/go-package'
                sh '''cd ${WORKSPACE}/roer-go/roer-0.11.3/
                SPINNAKER_API=https://dgtlspinnaker02.walgreens.com:8085 /var/jenkins_home/workspace/spinnaker/roer-go/go/bin/go run cmd/roer/main.go  --certPath "/var/jenkins_home/spin/.spin/client.crt" --keyPath "/var/jenkins_home/spin/.spin/client.key" pipeline save ${WORKSPACE}/PipelineConfig/config/spinnaker/pipeline-config.yaml'''
            } else {
                echo '****** Skipped Build Pipeline Creation ******'
            }
        } catch (exc) {
            currentBuild.result = "FAILURE"
            throw exc
        } finally {
        }
    }
    stage('Deploy Pipeline') {
        try {
            if (params.Pipeline == 'All' || params.Pipeline == 'Deploy') {
                sh 'echo ${BUILD_NUMBER}'
                sh 'echo ${WORKSPACE}'
                sh 'export PATH=/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/var/jenkins_home/workspace/spinnaker/roer-go/go/bin'
                sh 'export GOPATH=/var/jenkins_home/workspace/spinnaker/roer-go/go-package'
                sh 'cp ${WORKSPACE}/PipelineConfig/config/spinnaker/pipeline-config.yaml ${WORKSPACE}/PipelineConfig/config/spinnaker/pipeline-config-deploy.yaml'
                if (params.TemplateType == 'NodeJSAPIUI') {
                    sh 'sed -i.bak \'s/BuildTemplateFeatureV1/\'NodeJSAPIUIFeatureCDTemplateV1\'/g\' ${WORKSPACE}/PipelineConfig/config/spinnaker/pipeline-config-deploy.yaml'
                }
                if (params.TemplateType == 'NodeJSAPI') {
                    sh 'sed -i.bak \'s/BuildTemplateFeatureV1/\'NodeJSAPIFeatureCDTemplateV1\'/g\' ${WORKSPACE}/PipelineConfig/config/spinnaker/pipeline-config-deploy.yaml'
                }
                /*if (params.TemplateType == 'NodeJSUI') {
                    sh 'sed -i.bak \'s/BuildTemplateFeatureV1/\'NodeJSUIFeatureCDTemplateV1\'/g\' ${WORKSPACE}/PipelineConfig/config/spinnaker/pipeline-config-deploy.yaml'
                }*/
                if (params.TemplateType == 'SpringBootAPIUI') {
                    sh 'sed -i.bak \'s/BuildTemplateFeatureV1/\'SpringBootAPIUIFeatureCDTemplateV1\'/g\' ${WORKSPACE}/PipelineConfig/config/spinnaker/pipeline-config-deploy.yaml'
                }
                if (params.TemplateType == 'SpringBootAPI') {
                    sh 'sed -i.bak \'s/BuildTemplateFeatureV1/\'SpringBootAPIFeatureCDTemplateV1\'/g\' ${WORKSPACE}/PipelineConfig/config/spinnaker/pipeline-config-deploy.yaml'
                }
		if (params.TemplateType == 'SpringBootAPIPROBE') {
                    sh 'sed -i.bak \'s/BuildTemplateFeatureV1/\'SpringBootAPIFeatureCDTemplateProbeV1\'/g\' ${WORKSPACE}/PipelineConfig/config/spinnaker/pipeline-config-deploy.yaml'
                }
                if (params.TemplateType == 'SpringBootAPIMI') {
                    sh 'sed -i.bak \'s/BuildTemplateFeatureV1/\'SpringBootAPIMIFeatureCDTemplateV1\'/g\' ${WORKSPACE}/PipelineConfig/config/spinnaker/pipeline-config-deploy.yaml'
                }
                if (params.TemplateType == 'SpringBatch') {
                    sh 'sed -i.bak \'s/BuildTemplateFeatureV1/\'SpringBatchFeatureCDTemplateV1\'/g\' ${WORKSPACE}/PipelineConfig/config/spinnaker/pipeline-config-deploy.yaml'
                }
                /*if (params.TemplateType == 'SpringBootUI') {
                    sh 'sed -i.bak \'s/BuildTemplateFeatureV1/\'SpringBootUIFeatureCDTemplateV1\'/g\' ${WORKSPACE}/PipelineConfig/config/spinnaker/pipeline-config-deploy.yaml'
                }*/
                sh 'sed -i.bak "s/${MicroserviceName}-feature-build/${MicroserviceName}-feature-deploy/g" ${WORKSPACE}/PipelineConfig/config/spinnaker/pipeline-config-deploy.yaml'
                //  sh '''cd ${WORKSPACE}/roer-go/roer-0.11.3/
                // SPINNAKER_API=https://dgtlspinnaker02.walgreens.com:8085 /var/jenkins_home/workspace/spinnaker/roer-go/go/bin/go run cmd/roer/main.go help
                // '''
                // sh '''cd ${WORKSPACE}/roer-go/roer-0.11.3/
                // SPINNAKER_API=https://dgtlspinnaker02.walgreens.com:8085 /var/jenkins_home/workspace/spinnaker/roer-go/go/bin/go run cmd/roer/main.go --version
                // '''
                sh '''cd ${WORKSPACE}/roer-go/roer-0.11.3/
                SPINNAKER_API=https://dgtlspinnaker02.walgreens.com:8085 /var/jenkins_home/workspace/spinnaker/roer-go/go/bin/go run cmd/roer/main.go --certPath "/var/jenkins_home/spin/.spin/client.crt" --keyPath "/var/jenkins_home/spin/.spin/client.key" pipeline save ${WORKSPACE}/PipelineConfig/config/spinnaker/pipeline-config-deploy.yaml'''
            } else {
                echo '****** Skipped Deploy Pipeline Creation ******'
            }
        } catch (exc) {
            currentBuild.result = "FAILURE"
            throw exc
        } finally {
        }
    }
}

