schema: "1"
id: SpringBootAPIMIWWW3CDTemplateV1
metadata:
  name: Spring Boot API Multi Instance WWW3 CD Template - Develop Branch
  description: Spring Boot API Multiple Instance WWW3 Continuous Delivery Pipeline Template - Develop Branch
  owner: digital-ms-devops@walgreens.com
  scopes: [global]
variables:
- name: microserviceName
  description: Name of the Microservice
- name: TeamDL
  description: Enter Your Team DL
  example: ecomscm@walgreens.com
- name: TeamName
  description: Enter Your Team Name
  example: Devops
  defaultValue: Devops
- name: secrets
  type: list
  defaultValue:
  - name: team-backend-instance-1
    envVars:
      - backend_password
- name: envVariables
  type: list
- name: persistentVolumeClaims
  description: Persistent Volume Claims
  type: list
  defaultValue:
  - claimName: common
- name: clusters
  description: List of instances and their properties to be created
  type: list
- name: nameSpace
  description: Deployment Cluster Namespace
  defaultValue: dotcom-app
- name: listener
  description: Is this an listener application?
  example: true
  defaultValue: false
configuration:
  concurrentExecutions:
    limitConcurrent: true
    parallel: false
  triggers:
  - account: dotcomprodregistry
    enabled: true
    name: unnamed0
    organization: digital/dotcom
    registry: wagdigitaldotcomprod.azurecr.io
    repository: digital/dotcom/{{ microserviceName }}
    runAsUser: spinnaker-svc-account
    status:
    - successful
    tag: ".*"
    type: docker
  parameters: []
  notifications: []
  description: ""
stages:
- id: proceedToWWW3
  type: manualJudgment
  name: RMApproval
  config:
    failPipeline: true
    instructions: "Proceed Build #${trigger['tag']} to WWW3?"
    judgmentInputs: []
    notifications:
    - address: "{{ TeamDL }}"
      level: stage
      type: email
      when:
      - manualJudgment
      - manualJudgmentContinue
      - manualJudgmentStop
    sendNotifications: true
    propagateAuthenticationContext: false
- id: configureWWW3
  type: jenkins
  name: Configure WWW3
  dependsOn:
  - proceedToWWW3
  config:
    continuePipeline: false
    failPipeline: true
    job: "{{ microserviceName }}/job/{{ microserviceName }}-configmap-www3"
    master: intopsprd-jenkins
    parameters: {}
- id: deployToWWW3
  type: deploy
  name: Deploy to WWW3
  dependsOn:
  - configureWWW3
  config:
    notifications:
    - address: "{{ TeamDL }}"
      level: stage
      type: email
      when:
      - stage.failed
    sendNotifications: true
    parameters: {}
    clusters: |
      {% for cluster in clusters %}
      {% for environment in cluster.environments %}
      {% if environment.name == "WWW3" %}
      - {% module clustersModule clusterName=cluster.name microserviceName=microserviceName clusterProps=environment secrets=secrets envVariables=envVariables configMaps=configMaps persistentVolumeClaims=persistentVolumeClaims nameSpace=nameSpace TeamName=TeamName listener=listener %}
      {% endif %}
      {% endfor %}
      {% endfor %}
partials: []
modules:
- id: clustersModule
  usage: Defines a deploy stage cluster using the AWS cloud provider
  variables:
  - name: clusterName
    description: Cluster Name
  - name: microserviceName
    description: Microservice Name
  - name: clusterProps
    description: Cluster Properties
  - name: secrets
    description: Secrets
  - name: configMaps
    description: Config Maps
  - name: persistentVolumeClaims
    description: Persistent Volume Claims
  - name: envVariables
    description: Env Variables
  - name: nameSpace
    description: Deployment Cluster Namespace
  - name: TeamName
    description: Enter Your Team Name
  - name: listener
    description: Is this a listener application?
  definition:
    account: dcomwww3
    application: "{{ microserviceName }}"
    cloudProvider: kubernetes
    capacity:
      max: "{{ clusterProps.maxNumberOfReplicas }}"
      min: "{{ clusterProps.minNumberOfReplicas }}"
    containers:
      - args: ["{{ clusterProps.args }}"]
        command: ["/bin/sh", "-c"]
        envVars: |
          {% for secret in secrets %}
          {% for envVar in secret.envVars %}
          - {% module secretsEnvSourceModule envName=envVar secretName=secret.name %}
          {% endfor %}
          {% endfor %}
          {% for envVariable in envVariables %}
          - {% module envVarsModule name=envVariable.name value=envVariable.value %}
          {% endfor %}
        imageDescription:
          account: dotcomprodregistry
          fromTrigger: true
          imageId: "wagdigitaldotcomprod.azurecr.io/digital/dotcom/{{ microserviceName }} (Tag resolved at runtime)"
          registry: wagdigitaldotcomprod.azurecr.io
          repository: digital/dotcom/{{ microserviceName }}
        imagePullPolicy: ALWAYS
        lifecycle:
          postStart:
            execAction:
              commands:
              - sh
              - -c
              - mkdir -p /usr/local/ecomm/app/podstartup /usr/local/ecomm/app/podshutdown;
                cp /deployments/scripts/podstartup/* /usr/local/ecomm/app/podstartup/;
                cp /deployments/scripts/podshutdown/* /usr/local/ecomm/app/podshutdown/;
                chmod +x /usr/local/ecomm/app/podstartup/*.sh /usr/local/ecomm/app/podshutdown/*.sh;
                /usr/local/ecomm/app/podstartup/podstartup.sh
            type: EXEC
          preStop:
            execAction:
              commands:
              - sh
              - -c
              - /usr/local/ecomm/app/podshutdown/podshutdown.sh
            type: EXEC
        limits:
          cpu: "{{ clusterProps.maxCPU }}"
          memory: "{{ clusterProps.maxMemory }}"
        livenessProbe:
          handler:
            execAction:
              commands:
              - curl
              - -s
              - -f
              - http://localhost:8080/{{ clusterProps.livelinessURL }}
            httpGetAction:
              httpHeaders: []
              path: "{{ clusterProps.livelinessURL }}"
              port: 8080
              uriScheme: HTTP
            tcpSocketAction:
              port: 80
            type: EXEC
          initialDelaySeconds: 240
          periodSeconds: 60
          failureThreshold: 1
          timeoutSeconds: 3
        name: "{{ microserviceName }}"
        ports:
        - containerPort: 8080
          hostIp:
          hostPort:
          name: http
          protocol: TCP
        readinessProbe:
          handler:
            execAction:
              commands:
              - curl
              - -s
              - -f
              - http://localhost:8080/{{ clusterProps.livelinessURL }}
            httpGetAction:
              httpHeaders: []
              path: "{{ clusterProps.livelinessURL }}"
              port: 8080
              uriScheme: HTTP
            tcpSocketAction:
              port: 80
            type: EXEC
          initialDelaySeconds: 30
          periodSeconds: 5
          failureThreshold: 1
          timeoutSeconds: 2
        requests:
          cpu: "{{ clusterProps.minCPU }}"
          memory: "{{ clusterProps.minMemory }}"
        volumeMounts: |
          {% for secret in secrets %}
          - {% module volumeMountModule path="/deployments/secrets" name=secret.name %}
          {% endfor %}
          {% for persistentVolumeClaim in persistentVolumeClaims %}
          - {% module volumeMountModule path="/deployments/fileshare" name=persistentVolumeClaim.claimName %}
          {% endfor %}
          - mountPath: "/deployments/config"
            name: "{{ microserviceName }}"
            readOnly: false
          - mountPath: "/deployments/logs"
            name: "applogs"
            readOnly: false
          - mountPath: "/deployments/cache/voltage"
            name: "voltagecache"
            readOnly: false
          - mountPath: "/deployments/cache/app"
            name: "appcache"
            readOnly: false
          - mountPath: "/deployments/scripts/podstartup"
            name: "podstartup-config"
            readOnly: false
          - mountPath: "/deployments/scripts/podshutdown"
            name: "podshutdown-config"
            readOnly: false
          - mountPath: "/deployments/secrets/podstartup-secret"
            name: "podstartup-secret"
            readOnly: false            
    deployment:
      deploymentStrategy:
        rollingUpdate:
          maxSurge: 1
          maxUnavailable: 1
        type: RollingUpdate
      enabled: false
      minReadySeconds: 0
    dnsPolicy: ClusterFirst
    interestingHealthProviderNames:
    - KubernetesContainer
    - KubernetesPod
    loadBalancers:
    - "{{ microserviceName }}"
    maxRemainingAsgs: 3
    namespace: "{{ nameSpace }}"
    nodeSelector: {}
    podAnnotations: {}
    provider: kubernetes
    region: "{{ nameSpace }}"
    replicaSetAnnotations:
      team: "{{ TeamName }}"
      technology: SpringBoot API
      listener: "{{ listener }}"
    scaleDown: true
    scalingPolicy:
      cpuUtilization:
        target: "{{ clusterProps.cpuUtilizationTargetForAutoScaling }}"
    strategy: redblack
    stack: "{{ clusterName }}"
    targetSize: 1
    terminationGracePeriodSeconds: 30
    volumeSources: |
      {% for secret in secrets %}
      - {% module secretVolumeSourceModule name=secret.name %}
      {% endfor %}
      {% for persistentVolumeClaim in persistentVolumeClaims %}
      - {% module pvcVolumeSourceModule name=persistentVolumeClaim.claimName %}
      {% endfor %}
      - name: "{{ microserviceName }}"
        configMap:
          configMapName: "{{ microserviceName }}-config"
        type: CONFIGMAP
      - hostPath:
          path: "/appdata/disk1/logs"
        name: applogs
        type: HOSTPATH
      - hostPath:
          path: "/tmp/cache/voltage"
        name: voltagecache
        type: HOSTPATH
      - hostPath:
          path: "/tmp/cache/app"
        name: appcache
        type: HOSTPATH
      - configMap:
          configMapName: podstartup-config
        name: podstartup-config
        type: CONFIGMAP
      - configMap:
          configMapName: podshutdown-config
        name: podshutdown-config
        type: CONFIGMAP
      - secret:
          secretName: podstartup-secret
        name: podstartup-secret
        type: SECRET
- id: secretsEnvSourceModule
  usage: Defines the env source for exposing secrets as env variables
  variables:
  - name: envName
    description: env variable name
  - name: secretName
    description: Secret Name
  definition:
    envSource:
      secretSource:
        secretName: "{{ secretName }}"
        key: "{{ envName }}"
    name: "{{ envName }}"
- id: volumeMountModule
  usage: Defines the volume mount of a container
  variables:
  - name: name
    description: mount source name
  - name: path
    description: mount path
  definition:
    mountPath: "{{ path }}/{{ name }}"
    name: "{{ name }}"
    readOnly: false
- id: secretVolumeSourceModule
  usage: Defines volume source for secrets
  variables:
  - name: name
    description: secret name
  definition:
    name: "{{ name }}"
    secret:
      secretName: "{{ name }}"
    type: SECRET
- id: pvcVolumeSourceModule
  usage: Defines volume source for pvc
  variables:
  - name: name
    description: claim name
  definition:
    name: "{{ name }}"
    persistentVolumeClaim:
      claimName: "{{ name }}"
    type: PERSISTENTVOLUMECLAIM
- id: envVarsModule
  usage: Defines the ENV vars and values
  variables:
  - name: name
    description: ENV variable name
  - name: value
    description: ENV variable value
  definition:
    name: "{{ name }}"
    value: "{{ value }}"

