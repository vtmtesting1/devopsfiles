schema: "1"
id: springDeployPipelineTemplateV3
metadata:
  name: spring App Deploy Pipeline Template Version 3
  description: Pipeline Template to deploy spring application Version 3
  owner: syedabdul.raqib@walgreens.com
  scopes: [global]
variables:
- name: microserviceName
  description: Name of the Microservice
- name: minCPU
  description: Minimum CPU needed for the Microservice
  example: 1, 0.5, 0.25 [in core(s)]
- name: maxCPU
  description: Maximum number of core that can be allocated for the Microservice
  example: 1, 0.5, 0.25 [in core(s)]
- name: minMemory
  description: Minimum memory needed for the Microservice
  example: 1024Mi, 512Mi, 256Mi [in MB]
- name: maxMemory
  description: Maximum memory that can be allocated for the Microservice
  example: 1024Mi, 512Mi, 256Mi [in MB]
- name: minNumberOfReplicas
  description: Minimum number of replicas
  example: 1, 2, 3, 4
- name: maxNumberOfReplicas
  description: Maximum number of replicas
  example: 1, 2, 3, 4
- name: cpuUtilizationTargetForAutoScaling
  description: CPU utilization target for scaling
  example: 80, 60, 40
- name: livelinessURL
  description: Health URL of the Microservice
  example: /{microserviceName}/v1/ui/health
- name: appEnvVariables
  type: list
configuration:
  concurrentExecutions: {}
  triggers:
  - account: nonprodregistry
    application: "{{microserviceName}}"
    enabled: true
    name: unnamed0
    pipeline: 5da548fa-9f12-474b-828d-b770c136f939
    registry: nonprodregistry.azurecr.io
    repository: spring/"{{microserviceName}}"
    status:
    - successful
    tag: null
    type: docker
  parameters: []
  notifications: []
  description: ""
stages:
- id: configureDev
  type: jenkins
  name: Configure DEV
  config:
    continuePipeline: false
    failPipeline: true
    job: "{{ microserviceName }}-configure-dev"
    master: intops-jenkins
    parameters: {}
- id: deployToDev
  type: deploy
  name: Deploy to Dev
  dependsOn:
  - configureDev
  config:
    clusters:
    - account: dcomdev01
      application: "{{ microserviceName }}"
      cloudProvider: kubernetes
      capacity:
        max: "{{ maxNumberOfReplicas }}"
        min: "{{ minNumberOfReplicas }}"
      containers:
      - args: []
        command: []
        envVars: |
          {% for commonEnvVariable in commonEnvVariables %}
          - {% module envVarsModule envVarName=commonEnvVariable configMapName='wag-dotcom-common' %}
          {% endfor %}
          {% for appEnvVariable in devEnvVariables %}
          - {% module envVarsModule envVarName=devEnvVariable configMapName=microserviceName %}
          {% endfor %}
        imageDescription:
          account: nonprodregistry
          fromTrigger: true
          imageId: "nonprodregistry.azurecr.io/spring/{{ microserviceName }} (Tag resolved at runtime)"
          registry: nonprodregistry.azurecr.io
          repository: "{{ microserviceName }}"
        imagePullPolicy: ALWAYS
        limits:
          cpu: "{{ maxCPU }}"
          memory: "{{ maxMemory }}"
        livenessProbe:
          failureThreshold: 3
          handler:
            execAction:
              commands: []
            httpGetAction:
              path: "{{ livelinessURL }}"
              port: 8080
              uriScheme: HTTP
            tcpSocketAction:
              port: 8080
            type: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: "{{ microserviceName }}"
        ports:
        - containerPort: 8080
          hostIp:
          hostPort:
          name: http
          protocol: TCP
        readinessProbe:
        requests:
          cpu: "{{ minCPU }}"
          memory: "{{ minMemory }}"
        volumeMounts: []
      deployment:
        deploymentStrategy:
          rollingUpdate:
            maxSurge: 1
            maxUnavailable: 1
          type: RollingUpdate
        enabled: false
        minReadySeconds: 0
      dnsPolicy: ClusterFirst
      interestingHealthProviderNames:
      - KubernetesContainer
      - KubernetesPod
      loadBalancers:
      - "{{ microserviceName }}"
      maxRemainingAsgs: 4
      namespace: dotcom-test-dev
      nodeSelector: {}
      podAnnotations: {}
      provider: kubernetes
      region: dotcom-test-dev
      replicaSetAnnotations: {}
      scaleDown: true
      scalingPolicy:
        cpuUtilization:
          target: "{{ cpuUtilizationTargetForAutoScaling }}"
      stack: []
      strategy: redblack
      targetSize: 1
      terminationGracePeriodSeconds: 30
      volumeSources: []
- id: approveToUAT
  type: manualJudgment
  name: Approve to UAT
  dependsOn:
  - deployToDev
  config:
   failPipeline: true
   instructions: Proceed to UAT deployment
- id: configureUAT
  type: jenkins
  name: Configure UAT
  dependsOn:
  - approveToUAT
  config:
    continuePipeline: false
    failPipeline: true
    job: "{{ microserviceName }}-configure-uat"
    master: intops-jenkins
    parameters: {}
- id: deployToUAT
  type: deploy
  name: Deploy to UAT
  dependsOn:
  - configureUAT
  config:
    clusters:
    - account: dcomdev01
      application: "{{ microserviceName }}"
      cloudProvider: kubernetes
      capacity:
        max: "{{ maxNumberOfReplicas }}"
        min: "{{ minNumberOfReplicas }}"
      containers:
      - args: []
        command: []
        envVars: |
          {% for appEnvVariable in appEnvVariables %}
          - {% module envVarsModule envVarName=appEnvVariable configMapName=microserviceName %}
          {% endfor %}
          {% for uatEnvVariable in uatEnvVariables %}
          - {% module envVarsModule envVarName=uatEnvVariable configMapName=microserviceName %}
          {% endfor %}
        imageDescription:
          account: nonprodregistry
          fromTrigger: true
          imageId: "nonprodregistry.azurecr.io/{{ microserviceName }} (Tag resolved at runtime)"
          registry: nonprodregistry.azurecr.io
          repository: "{{ microserviceName }}"
          tag:
        imagePullPolicy: ALWAYS
        limits:
          cpu: "{{ maxCPU }}"
          memory: "{{ maxMemory }}"
        livenessProbe:
          failureThreshold: 3
          handler:
            execAction:
              commands: []
            httpGetAction:
              path: "{{ livelinessURL }}"
              port: 8080
              uriScheme: HTTPS
            tcpSocketAction:
              port: 8080
            type: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: "{{ microserviceName }}"
        ports:
        - containerPort: 8080
          hostIp:
          hostPort:
          name: http
          protocol: TCP
        readinessProbe:
        requests:
          cpu: "{{ minCPU }}"
          memory: "{{ minMemory }}"
        volumeMounts: []
      deployment:
        deploymentStrategy:
          rollingUpdate:
            maxSurge: 1
            maxUnavailable: 1
          type: RollingUpdate
        enabled: false
        minReadySeconds: 0
      dnsPolicy: ClusterFirst
      interestingHealthProviderNames:
      - KubernetesContainer
      - KubernetesPod
      loadBalancers:
      - "{{ microserviceName }}-mqa2"
      maxRemainingAsgs: 4
      namespace: dotcom-test-uat
      nodeSelector: {}
      podAnnotations: {}
      provider: kubernetes
      region: dotcom-test-uat
      replicaSetAnnotations: {}
      scaleDown: true
      scalingPolicy:
        cpuUtilization:
          target: "{{ cpuUtilizationTargetForAutoScaling }}"
      stack: mqa2
      strategy: redblack
      targetSize: 1
      terminationGracePeriodSeconds: 30
      volumeSources: []
- id: createCRQ
  type: manualJudgment
  name: Create CRQ
  dependsOn:
  - deployToUAT
  config:
    failPipeline: true
    instructions: Proceed to WWW3 deployment
# - id: configureWWW3
#   name: Configure WWW3
#   type: ''
#   dependsOn:
#   - createCRQ
#   config:
#     failPipeline: true
# - id: deployToWWW3
#   name: Deploy to WWW3
#   type: ''
#   dependsOn:
#   - configureWWW3
#   config:
#     failPipeline: true
# - id: approveToProd
#   type: manualJudgment
#   name: Approve to Prod
#   dependsOn:
#   - deployToWWW3
#   config:
#     failPipeline: true
#   config:
#     failPipeline: true
#     instructions: Proceed to production deployment
# - id: configureProd
#   name: Configure Prod
#   type: ''
#   dependsOn:
#   - approveToProd
#   config:
#     failPipeline: true
# - id: deployToProd
#   name: Deploy to Prod
#   type: ''
#   dependsOn:
#   - configureProd
#   config:
#     failPipeline: true
partials: []
modules:
- id: envVarsModule
  usage: Defines the environment variables of a container
  variables:
  - name: envVarName
    description: Environment variable name
  - name: configMapName
    description: Config map name
  definition:
    envSource:
      configMapSource:
        configMapName: "{{ configMapName }}-env-config"
        key: "{{ envVarName }}"
    name: "{{ envVarName }}"

