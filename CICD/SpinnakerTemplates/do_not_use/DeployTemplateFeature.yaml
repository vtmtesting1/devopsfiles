schema: "1"
id: DeployPipelineTemplateV8
metadata:
  name: Deploy Pipeline Template Version 8
  description: Deploy spring application Version 8
  owner: syedabdul.raqib@walgreens.com
  scopes: [global]
variables:
- name: microserviceName
  description: Name of the Microservice
- name: minCPU
  description: Minimum CPU needed for the Microservice
  example: 1, 0.5, 0.25 [in core(s)]
- name: maxCPU
  description: Maximum number of core that can be allocated for the Microservice
  example: 1, 0.5, 0.25 [in core(s)]
- name: minMemory
  description: Minimum memory needed for the Microservice
  example: 1024Mi, 512Mi, 256Mi [in MB]
- name: maxMemory
  description: Maximum memory that can be allocated for the Microservice
  example: 1024Mi, 512Mi, 256Mi [in MB]
- name: minNumberOfReplicas
  description: Minimum number of replicas
  example: 1, 2, 3, 4
- name: maxNumberOfReplicas
  description: Maximum number of replicas
  example: 1, 2, 3, 4
- name: cpuUtilizationTargetForAutoScaling
  description: CPU utilization target for scaling
  example: 80, 60, 40
- name: livelinessURL
  description: Health URL of the Microservice
  example: /{microserviceName}/v1/ui/health
- name: args
  description: Arguments to start the application
  example: java -jar -Xms256m -Xmx256m /usr/local/ecomm/app/ms-svc.jar 
- name: TeamDL
  description: Enter Your Team DL
  example: ecomscm@walgreens.com
- name: secretEnvVariables
  type: list
- name: TeamName
  description: Enter Team Name
  example: cac, dpf
configuration:
  concurrentExecutions: {}
  triggers:
  - account: nonprodregistry
    enabled: false
    name: unnamed0
    organization: digital/dotcom
    registry: nonprodregistry.azurecr.io
    repository: digital/dotcom/{{ microserviceName }}
    runAsUser: spinnaker-svc-account
    status:
    - successful
    tag: "latest"
    type: docker
  parameters: []
  notifications: []
  description: ""
stages:
- id: configureDev
  type: jenkins
  name: Configure DEV
  config:
    continuePipeline: false
    failPipeline: true
    job: "{{ microserviceName }}/job/{{ microserviceName }}-configure-dev"
    master: intops-jenkins
    parameters: {}
- id: deployToDev
  type: deploy
  name: Deploy to Dev
  dependsOn:
  - configureDev
  config:
    notifications:
    - address: "{{ TeamDL }}"
      cc: ecomscm@walgreens.com
      level: stage
      type: email
      when:
      - stage.starting
      - stage.complete
      - stage.failed
    sendNotifications: true
    parameters: {}
    clusters:
    - account: dcomdev03
      application: "{{ microserviceName }}"
      cloudProvider: kubernetes
      capacity:
        max: "{{ maxNumberOfReplicas }}"
        min: "{{ minNumberOfReplicas }}"
      containers:
      - args: ["{{ args }}"]
        command: ["/bin/sh", "-c"]
        envVars: |
          {% for secretEnvVariable in secretEnvVariables %}
          - {% module secretVarsModule secretVarName=secretEnvVariable secretName=TeamName %}
          {% endfor %}
        imageDescription:
          account: nonprodregistry
          fromTrigger: true
          imageId: "nonprodregistry.azurecr.io/digital/dotcom/{{ microserviceName }} (Tag resolved at runtime)"
          registry: nonprodregistry.azurecr.io
          repository: digital/dotcom/{{ microserviceName }}
        imagePullPolicy: ALWAYS
        limits:
          cpu: "{{ maxCPU }}"
          memory: "{{ maxMemory }}"
        livenessProbe:
          failureThreshold: 3
          handler:
            execAction:
              commands: []
            httpGetAction:
              path: "{{ livelinessURL }}"
              port: 8080
              uriScheme: HTTP
            tcpSocketAction:
              port: 8080
            type: HTTP
          initialDelaySeconds: 150
          periodSeconds: 60
          failureThreshold: 2
          timeoutSeconds: 1
        name: "{{ microserviceName }}"
        ports:
        - containerPort: 8080
          hostIp:
          hostPort:
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          handler:
            execAction:
              commands: []
            httpGetAction:
              path: "{{ livelinessURL }}"
              port: 8080
              uriScheme: HTTP
            tcpSocketAction:
              port: 8080
            type: HTTP
          initialDelaySeconds: 150
          periodSeconds: 60
          failureThreshold: 2
          timeoutSeconds: 1       
        requests:
          cpu: "{{ minCPU }}"
          memory: "{{ minMemory }}"
        volumeMounts:
        - mountPath: "/deployments/config"
          name: "{{ microserviceName }}"
          readOnly: false
        - mountPath: "/deployments/logs"
          name: "applogs"
          readOnly: false
        - mountPath: "/deployments/secrets"
          name: "ssl-secret-volume"
          readOnly: false
      deployment:
        deploymentStrategy:
          rollingUpdate:
            maxSurge: 1
            maxUnavailable: 1
          type: RollingUpdate
        enabled: false
        minReadySeconds: 0
      dnsPolicy: ClusterFirst
      interestingHealthProviderNames:
      - KubernetesContainer
      - KubernetesPod
      loadBalancers:
      - "{{ microserviceName }}"
      maxRemainingAsgs: 4
      namespace: dcom-dev-spinnaker
      nodeSelector: {}
      podAnnotations: {}
      provider: kubernetes
      region: dcom-dev-spinnaker
      replicaSetAnnotations: {}
      scaleDown: true
      scalingPolicy:
        cpuUtilization:
          target: "{{ cpuUtilizationTargetForAutoScaling }}"
      strategy: redblack
      targetSize: 1
      terminationGracePeriodSeconds: 30
      volumeSources:
      - configMap:
         configMapName: "{{ microserviceName }}-config"
        name: "{{ microserviceName }}"
        type: CONFIGMAP
      - hostPath:
          path: "/var/log/containers"
        name: applogs
        type: HOSTPATH
      - name: ssl-secret-volume 
        secret:
          secretName: "{{ TeamName }}-file-secrets"
        type: SECRET
- id: FunctionalTest
  type: jenkins
  name: Functional Test
  dependsOn:
  - deployToDev
  config:
    continuePipeline: false
    failPipeline: true
    job: "{{ microserviceName }}/job/{{ microserviceName }}-functional-test"
    master: intops-jenkins
    notifications:
    - address: "{{ TeamDL }}"
      cc: ecomscm@walgreens.com
      level: stage
      type: email
      when:
      - stage.starting
      - stage.complete
      - stage.failed
    parameters:
    sendNotifications: true
    parameters: {}
- id: LoadTest
  type: jenkins
  name: Load Test
  dependsOn:
  - FunctionalTest
  config:
    continuePipeline: false
    failPipeline: true
    job: "{{ microserviceName }}/job/{{ microserviceName }}-load-test"
    master: intops-jenkins
    notifications:
    - address: "{{ TeamDL }}"
      cc: ecomscm@walgreens.com
      level: stage
      type: email
      when:
      - stage.starting
      - stage.complete
      - stage.failed
    parameters:
    sendNotifications: true
    parameters: {}
partials: []
modules:
- id: secretVarsModule
  usage: Defines the secret variables of a container
  variables:
  - name: secretVarName
    description: secret variable name
  - name: secretName
    description: Config Map Name
  definition:
    envSource:
      secretSource:
        secretName: "{{ secretName }}-env-secrets"
        key: "{{ secretVarName }}"
    name: "{{ secretVarName }}"

